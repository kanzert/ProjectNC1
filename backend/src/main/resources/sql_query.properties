# ===============================
# SQL QUERIES
# ===============================


# ===============================
# AchievementDaoImpl
# ===============================

achievement.all = SELECT * FROM achievement
achievement.create = INSERT \
  INTO achievement(title, image, quiz_amount, created_amount, user_id, cat_id) \
  VALUES (?, ?, ?, ?, ?, ?);
achievement.user = SELECT A.title, A.image, A.quiz_amount, UA.played \
FROM achievement A \
LEFT OUTER JOIN (SELECT A.title, COUNT(QTC.cat_id) AS played \
FROM user_to_ses US \
INNER JOIN session S ON US.ses_id = S.id \
INNER JOIN quiz_to_categ QTC ON QTC.quiz_id = S.quiz_id \
INNER JOIN achievement A ON A.cat_id = QTC.cat_id \
WHERE US.user_id = ? \
GROUP BY QTC.cat_id, A.title) AS UA ON A.title = UA.title

achievement.set = INSERT INTO user_to_ach (user_id, ach_id) \
  (SELECT ? as user_id, A.id as ach_id \
  FROM achievement A \
  LEFT OUTER JOIN (SELECT A.title, COUNT(QTC.cat_id) AS played \
  FROM user_to_ses US \
  INNER JOIN session S ON US.ses_id = S.id \
  INNER JOIN quiz_to_categ QTC ON QTC.quiz_id = S.quiz_id \
  INNER JOIN achievement A ON A.cat_id = QTC.cat_id \
  WHERE US.user_id = ? \
  GROUP BY QTC.cat_id, A.title) AS UA ON A.title = UA.title \
  WHERE UA.played >= A.quiz_amount)

# ===============================
# UserInviteDaoImpl
# ===============================

user.send = INSERT INTO friend_to(activated, invite_text, invite_date, user_id_from, user_id_to) \
  VALUES (?, ?, ?, ?, ?)
user.getUserInvite = SELECT F.id, F.invite_text, U.username, U.image \
  FROM friend_to F \
  INNER JOIN users U ON U.id = F.user_id_from \
  WHERE F.user_id_to = ? AND F.activated = false
user.getFriendsList = SELECT id, username, image \
  FROM users \
  WHERE id IN \
  (SELECT user_id_from \
  FROM friend_to WHERE user_id_to = ? AND activated = true) OR id IN \
  (SELECT user_id_to \
  FROM friend_to \
  WHERE user_id_from = ? AND activated = true)
user.accept = UPDATE friend_to \
  SET activated = true \
  WHERE id = ?
user.decline = DELETE FROM friend_to \
  WHERE id = ?
user.deleteFriendFromList = DELETE FROM friend_to \
  WHERE user_id_from = ? AND user_id_to = ? \
  OR user_id_to = ? AND user_id_from = ?
# ===============================
# AnnouncementDaoImpl
# ===============================
create.announcement = INSERT INTO announcement(title, text, date, image, status_id, cat_id, user_id) \
  VALUES (?, ?, ?, ?, ?, ?, ?)
update.announcement = UPDATE announcement set \
  title = ?, text = ?, date = ?, image = ?, status_id = ?, cat_id = ?, user_id = ? where id = ?
delete.announcement = DELETE from announcement where id = ?
get.announcement = select an.id, an.title, an.text, an.date, an.image, an.status_id, an.cat_id, an.user_id \
  from announcement  an where an.id = ?;
get.created.announcement = select an.id, an.title, an.text, an.date, an.image, an.status_id, an.cat_id, an.user_id \
  from announcement  an where status_id = 1
get.all.announcement = select an.id, an.title, an.text, an.date, an.image, an.status_id, an.cat_id, an.user_id \
  from announcement  an where status_id <> 1  order by an.status_id desc, an.date desc;
approve.announcement = UPDATE announcement set status_id = 2  where id = ?
# ===============================
# NotificationDaoImpl
# ===============================
create.notification = INSERT INTO notification( text, seen, date, cat_id, user_id) values( ?, ?, ?, ?, ?)
update.notification = UPDATE notification set  text = ?, seen = ?, date = ?,  cat_id = ?, user_id = ? where id = ?
delete.notification = DELETE from notification where id = ?
set.setting.notification = INSERT INTO not_setting(cat_id, user_id, enabled) \
  values( ?, ?, ?) ON CONFLICT \
  ON CONSTRAINT not_setting_pkey DO UPDATE set enabled = ?
get.notification.settings = select nt.cat_id, nt.user_id, nt.enabled from not_setting nt where nt.user_id = ? order by nt.cat_id
get.all.notification = select nt.id, nt.text, nt.seen, nt.date, nt.cat_id, nt.user_id \
  from notification nt \
  where nt.cat_id not in \
  (select setting.cat_id from public.not_setting setting where setting.enabled = false and setting.user_id = ?) \
  and nt.user_id = ? order by nt.date desc

# ===============================
# OptionDaoImpl
# ===============================
get.option=SELECT id, is_correct, text, image, quest_id \
  FROM option WHERE quest_id = ?
get.seqoption=SELECT id, serial_num, text, image, quest_id FROM seq_option \
  WHERE quest_id = ?
get.defoption=SELECT id, answer, quest_id, image FROM default_quest \
  WHERE quest_id = ?
create.option=INSERT INTO public.option(is_correct, text, image, quest_id) VALUES (?, ?, ?, ?);
create.seqoption=INSERT INTO public.seq_option(serial_num, text, image, quest_id) VALUES (?, ?, ?, ?);
create.defoption=INSERT INTO public.default_quest( answer, image, quest_id) VALUES ( ?, ?, ?)
# ===============================
# UserQuizFavDaoImpl
# ===============================
create.favourite=INSERT INTO user_quiz_fav(user_id, quiz_id) VALUES (?, ?)
delete.favourite=DELETE from user_quiz_fav where user_id = ? AND quiz_id = ?
# ===============================
# QuestionDaoImpl
# ===============================
get.quiz.questions=SELECT Q.id, Q.time, Q.text, Q.max_points, Q.image, Q.type_id, QT.name AS type_name, Q.quiz_id \
  FROM question Q INNER JOIN quest_type QT ON Q.type_id=QT.id \
  WHERE Q.quiz_id = ?
get.question=SELECT Q.id, Q.time, Q.text, Q.max_points, Q.image, Q.type_id, QT.name AS type_name, Q.quiz_id \
  FROM question Q INNER JOIN quest_type QT ON Q.type_id=QT.id \
  WHERE Q.id = ?
create.question=INSERT INTO question( time, text, max_points, image, type_id, quiz_id) VALUES ( ?, ?, ?, ?, ?, ?)
update.question=UPDATE public.question SET time =?, text=?, max_points=?, image=?, type_id=?, quiz_id=? WHERE id = ?
delete.question=DELETE from question WHERE id = ?
# ===============================
# QuizDaoImpl
# ===============================
get.quiz=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  WHERE Q.id = ?
get.quiz.by.userId=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  WHERE user_id = ?
get.approved.quizes=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  WHERE status_id = 2
get.approved.user.quizes=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id, \
  Q.id IN (SELECT UQF.quiz_id \
  FROM user_quiz_fav UQF \
  WHERE UQF.user_id = ?) AS favorite , \
  Q.id IN (SELECT DISTINCT(S.quiz_id) AS sel_quiz_id \
  FROM user_to_ses US INNER JOIN session S ON US.ses_id = S.id \
  WHERE US.user_id = ? AND S.status_id = 2) AS completed \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  WHERE status_id = 2
get.completed.quizes=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id, \
  Q.id IN (SELECT UQF.quiz_id \
  FROM user_quiz_fav UQF \
  WHERE UQF.user_id = ?) AS favorite, \
  TRUE AS completed \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  WHERE Q.id IN (SELECT DISTINCT(S.quiz_id) AS id \
  FROM user_to_ses US INNER JOIN session S ON US.ses_id = S.id \
  WHERE US.user_id = ? AND S.status_id = 2) AND Q.status_id = 2
get.favourite.quizes=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id , TRUE as favorite, \
  Q.id IN (SELECT DISTINCT(S.quiz_id) AS sel_quiz_id \
  FROM user_to_ses US INNER JOIN session S ON US.ses_id = S.id \
  WHERE US.user_id = ? AND S.status_id = 2) AS completed \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  WHERE status_id = 2 AND Q.id IN (SELECT UQF.quiz_id \
                                   FROM user_quiz_fav UQF \
                                   WHERE UQF.user_id = ?)
get.category.quizes=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
              INNER JOIN quiz_to_categ QTC ON Q.id = QTC.quiz_id\
              INNER JOIN quiz_category QC ON QTC.cat_id = QC.id \
  WHERE QC.name= ?
get.quizes=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id
create.quiz=INSERT INTO quiz( title, date, description, image, status_id, user_id) VALUES (?, ?, ?, ?, ?, ?)
update.quiz=UPDATE quiz set title = ?, date = ?, description = ?, image = ?, status_id = ?, user_id = ? WHERE id = ?
delete.quiz=DELETE FROM quiz WHERE id = ?
approve.quiz=UPDATE quiz set status_id = ? WHERE id = ?

get.created.quizes=SELECT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id,QS.name as status_name , Q.user_id \
  FROM quiz Q INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  WHERE status_id = 1
get.userId.by.quiz = SELECT Q.user_id FROM quiz Q WHERE Q.id = ?
get.title.by.quiz = SELECT Q.title FROM quiz Q WHERE Q.id = ?
get.top.stats=SELECT row_number() over (ORDER BY score DESC, time) as place ,U.username, US.score, US.time \
  FROM user_to_ses US INNER JOIN users U ON US.user_id = U.id \
  WHERE US.time IS NOT null AND ses_id IN (SELECT id FROM session WHERE quiz_id = ? AND status_id = 2) \
  LIMIT 5
search.quiz = SELECT DISTINCT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id, Q.user_id, QS.name as status_name \
  FROM quiz Q INNER JOIN quiz_to_categ QTC ON Q.id = QTC.quiz_id \
  INNER JOIN quiz_category QC ON QC.id = QTC.cat_id \
  INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  INNER JOIN users U ON Q.user_id = U.id \
  WHERE (LOWER(Q.title) LIKE LOWER(?) or LOWER(Q.description) LIKE LOWER(?)) AND Q.status_id = 2 AND QC.name IN (?, ?, ?, ?, ?) AND Q.date >= ?::date AND Q.date <= ?::date AND (U.username LIKE ? OR U.firstname LIKE ? OR U.lastname LIKE ?)
get.suggestions= SELECT Q.id, \
Q.title, \
Q.date, \
Q.description, \
Q.status_id, \
'approved' AS status_name, \
Q.user_id, \
Q.image, \
FALSE AS favorite, \
FALSE AS completed, \
SUM(f_coef) + SUM(play_coef) + COUNT(DISTINCT(fav_friends))*0.3 + COUNT(DISTINCT(played_friends))*0.2 AS coef \
FROM quiz Q \
LEFT OUTER JOIN quiz_to_categ QTC ON Q.id = QTC.quiz_id \
LEFT OUTER JOIN \
(SELECT QTC1.cat_id AS sel_cat_id, \
COUNT(DISTINCT(FQ.fav_quiz_id))*0.4 AS f_coef, \
COUNT(DISTINCT(SQ.sel_quiz_id))*0.1 AS play_coef \
FROM quiz_to_categ QTC1 \
LEFT OUTER JOIN \
(SELECT S.quiz_id AS sel_quiz_id \
FROM user_to_ses US \
INNER JOIN SESSION S ON US.ses_id = S.id \
WHERE user_id = ? \
AND S.status_id = 2) SQ ON SQ.sel_quiz_id = QTC1.quiz_id \
LEFT OUTER JOIN \
(SELECT F.quiz_id AS fav_quiz_id \
FROM user_quiz_fav F \
WHERE F.user_id = ?) FQ ON FQ.fav_quiz_id = QTC1.quiz_id \
GROUP BY QTC1.cat_id) QQ1 ON QTC.cat_id=QQ1.sel_cat_id \
LEFT OUTER JOIN \
(SELECT DISTINCT(S.quiz_id) AS friend_played_quiz_id, \
user_id AS played_friends \
FROM user_to_ses US \
LEFT OUTER JOIN SESSION S ON US.ses_id = S.id \
WHERE user_id IN \
(SELECT id \
FROM users \
WHERE id IN \
(SELECT user_id_from \
FROM friend_to \
WHERE user_id_to = ? \
AND activated ) \
OR id IN \
(SELECT user_id_to \
FROM friend_to \
WHERE user_id_from = ? \
AND activated)) \
AND S.status_id = 2 )AS FPQ ON Q.id=FPQ.friend_played_quiz_id \
LEFT OUTER JOIN \
(SELECT quiz_id AS friends_fav_quiz, \
user_id AS fav_friends \
FROM user_quiz_fav \
WHERE user_id IN \
(SELECT id \
FROM users \
WHERE id IN \
(SELECT user_id_from \
FROM friend_to \
WHERE user_id_to = ? \
AND activated ) \
OR id IN \
(SELECT user_id_to \
FROM friend_to \
WHERE user_id_from = ? \
AND activated))) FFQ ON Q.id=friends_fav_quiz \
WHERE Q.id NOT IN \
(SELECT DISTINCT(S.quiz_id) AS sel_quiz_id \
FROM user_to_ses US \
INNER JOIN SESSION S ON US.ses_id = S.id \
WHERE user_id = ? \
AND S.status_id = 2) \
AND Q.status_id = 2 \
GROUP BY Q.id \
ORDER BY coef
# ===============================
# SessionDaoImpl
# ===============================
create.session=INSERT INTO session(access_code, date, quiz_id, status_id) VALUES ( ?, ?, ? ,?)
get.session=SELECT S.id,S.access_code,S.date,S.quiz_id,S.status_id ,SS.name AS status_name \
  FROM session S INNER JOIN ses_status SS ON S.status_id = SS.id \
  WHERE S.id = ?
update.session=UPDATE session SET access_code = ?, date = ?, quiz_id = ? WHERE id = ?
update.status.session =UPDATE session SET status_id =?  WHERE id = ?
check.access_code.session=SELECT ? IN (SELECT access_code FROM session WHERE status_id = 1)
get.session.by.access_code= SELECT S.id,S.access_code,S.date,S.quiz_id,S.status_id ,SS.name AS status_name \
  FROM session S INNER JOIN ses_status SS ON S.status_id = SS.id \
  WHERE S.access_code = ? AND S.status_id = 1

# ===============================
# UserActivityDaoImpl
# ===============================
create.activity=INSERT INTO user_activ( text, date, cat_id, user_id, elem_id) VALUES (?, ?, ?, ?, ?)
get.activity=SELECT id, date, cat_id, user_id, text, elem_id \
  FROM public.user_activ WHERE id = ?
update.activity=UPDATE user_activ set text = ?, date = ?, cat_id = ?, user_id = ?,elem_id = ? where id = ?
delete.activity=DELETE from user_activ where id = ?
get.friends.activities=SELECT UU.id, UU.date, UU.cat_id, UU.user_id, UU.text, UU.elem_id ,UU.username, UU.image, Q.title as elem_name \
  FROM quiz Q  INNER JOIN (SELECT UA.id, UA.date, UA.cat_id, UA.user_id, UA.text, UA.elem_id ,U.username, U.image \
  FROM user_activ UA INNER JOIN users U ON UA.user_id = U.id \
  WHERE (user_id IN (SELECT user_id_from \
  FROM friend_to \
  WHERE user_id_to = ? AND activated) \
  OR user_id IN (SELECT user_id_to \
  FROM friend_to \
  WHERE user_id_from = ? AND activated)) \
  AND cat_id NOT IN (SELECT act_cat \
  FROM friend_activ_setting \
  WHERE user_id = ? AND NOT enabled ) \
    ) UU on UU.elem_id = Q.id \
  WHERE cat_id !=3 \
  ORDER BY date DESC
get.friends.activities.settings=SELECT user_id, act_cat, enabled \
  FROM friend_activ_setting \
  WHERE user_id = ?  ORDER BY act_cat
set.friends.activities.setting=INSERT INTO friend_activ_setting(user_id, act_cat, enabled) \
  VALUES( ?, ?, ?) ON CONFLICT \
  ON CONSTRAINT friend_activ_setting_pkey DO UPDATE set enabled = ?

# ===============================
# UserDaoImpl
# ===============================
get.user.by.email=SELECT U.id,U.firstname,U.lastname,U.username,U.image,U.password,U.email,U.registr_date,U.activate_link,U.status_id,US.name as status_name,U.role_id,R.name as role_name \
  FROM users U INNER JOIN user_status US ON U.status_id = US.id \
  INNER JOIN role R ON R.id = U.role_id \
  WHERE U.email = ?
check.email = SELECT ? IN (SELECT email FROM users)
check.token = SELECT ? IN (SELECT activate_link FROM users)
activate.token = UPDATE users set status_id = 2 WHERE activate_link = ?
get.user.by.token = SELECT U.id,U.firstname,U.lastname,U.username,U.image,U.password,U.email,U.registr_date,U.activate_link,U.status_id,US.name as status_name,U.role_id,R.name as role_name \
  FROM users U \
  INNER JOIN user_status US ON U.status_id = US.id \
  INNER JOIN role R ON R.id = U.role_id \
  WHERE U.activate_link = ?
get.pass.by.username = SELECT PASSWORD FROM users WHERE USERNAME = ?
get.user.by.username = SELECT U.id,U.firstname,U.lastname,U.username,U.image,U.password,U.email,U.registr_date,U.activate_link,U.status_id,US.name as status_name,U.role_id,R.name as role_name \
  FROM users U INNER JOIN user_status US ON U.status_id = US.id \
  INNER JOIN role R ON R.id = U.role_id \
  WHERE U.username = ?
get.user.by.id = SELECT U.id,U.firstname,U.lastname,U.username,U.image,U.password,U.email,U.registr_date,U.activate_link,U.status_id,US.name as status_name,U.role_id,R.name as role_name \
  FROM users U INNER JOIN user_status US ON U.status_id = US.id \
  INNER JOIN role R ON R.id = U.role_id \
  WHERE U.id = ?
delete.user.by.id = DELETE from USERS where id = ?
update.user = UPDATE USERS set firstname = ? , lastname = ? , username = ? , password = ? , email = ? , image = ? , registr_date = ? , activate_link = ? , status_id = ? , role_id = ? \
  WHERE id = ?
save.user = INSERT INTO users(firstname, lastname, username, password, email, image, registr_date, activate_link, status_id, role_id) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

#dima
set.user.status = UPDATE users set status_id = ? WHERE id = ?
get.user.language = SELECT lan.name FROM users INNER JOIN languages lan ON COALESCE(users.lang_id,1) = lan.id WHERE users.id = ?
set.user.language = UPDATE users set lang_id = ? WHERE id = ?
search.user = SELECT U.id,U.firstname,U.lastname,U.username,U.image,U.password,U.email,U.registr_date,U.activate_link,U.status_id,US.name as status_name,U.role_id,R.name as role_name \
   FROM users U INNER JOIN user_status US ON U.status_id = US.id INNER JOIN role R ON R.id = U.role_id WHERE (U.username LIKE ? OR U.firstname LIKE ? OR U.lastname LIKE ?) and U.status_id <> 1 and U.role_id between ? and ?

# ===============================
# UserToSessionDaoImpl
# ===============================
save.user.session = INSERT INTO user_to_ses (ses_id, user_id) VALUES ( ?, ?)
get.user.session.by.id = SELECT id, ses_id, user_id, score, time FROM user_to_ses WHERE id = ?
update.user.session = UPDATE user_to_ses SET  score = ? , time = ? WHERE ses_id = ? AND user_id = ?
delete.user.session.by.id = DELETE FROM user_to_ses WHERE id = ?
get.stats = SELECT row_number() over (ORDER BY score DESC, time) as place ,U.username, US.score, US.time \
  FROM user_to_ses US INNER JOIN users U ON US.user_id = U.id \
  WHERE ses_id = ?

# ===============================
# QuizCategoryDaoImpl
# ===============================
get.all.categories=SELECT id, name, description FROM quiz_category;
add.quiz.to.category = INSERT INTO quiz_to_categ(cat_id, quiz_id) VALUES (?, ?)

